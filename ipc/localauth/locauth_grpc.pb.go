// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: ipc/locauth.proto

package localauth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LocalAuth_Ping_FullMethodName           = "/localauth.LocalAuth/Ping"
	LocalAuth_GetAccessToken_FullMethodName = "/localauth.LocalAuth/GetAccessToken"
	LocalAuth_Callback_FullMethodName       = "/localauth.LocalAuth/Callback"
)

// LocalAuthClient is the client API for LocalAuth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocalAuthClient interface {
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PingResponse, error)
	GetAccessToken(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ATResponse, error)
	Callback(ctx context.Context, in *CBRequest, opts ...grpc.CallOption) (*Empty, error)
}

type localAuthClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalAuthClient(cc grpc.ClientConnInterface) LocalAuthClient {
	return &localAuthClient{cc}
}

func (c *localAuthClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, LocalAuth_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localAuthClient) GetAccessToken(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ATResponse, error) {
	out := new(ATResponse)
	err := c.cc.Invoke(ctx, LocalAuth_GetAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localAuthClient) Callback(ctx context.Context, in *CBRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, LocalAuth_Callback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalAuthServer is the server API for LocalAuth service.
// All implementations must embed UnimplementedLocalAuthServer
// for forward compatibility
type LocalAuthServer interface {
	Ping(context.Context, *Empty) (*PingResponse, error)
	GetAccessToken(context.Context, *Empty) (*ATResponse, error)
	Callback(context.Context, *CBRequest) (*Empty, error)
	mustEmbedUnimplementedLocalAuthServer()
}

// UnimplementedLocalAuthServer must be embedded to have forward compatible implementations.
type UnimplementedLocalAuthServer struct {
}

func (UnimplementedLocalAuthServer) Ping(context.Context, *Empty) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedLocalAuthServer) GetAccessToken(context.Context, *Empty) (*ATResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessToken not implemented")
}
func (UnimplementedLocalAuthServer) Callback(context.Context, *CBRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Callback not implemented")
}
func (UnimplementedLocalAuthServer) mustEmbedUnimplementedLocalAuthServer() {}

// UnsafeLocalAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocalAuthServer will
// result in compilation errors.
type UnsafeLocalAuthServer interface {
	mustEmbedUnimplementedLocalAuthServer()
}

func RegisterLocalAuthServer(s grpc.ServiceRegistrar, srv LocalAuthServer) {
	s.RegisterService(&LocalAuth_ServiceDesc, srv)
}

func _LocalAuth_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalAuthServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalAuth_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalAuthServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalAuth_GetAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalAuthServer).GetAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalAuth_GetAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalAuthServer).GetAccessToken(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalAuth_Callback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalAuthServer).Callback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalAuth_Callback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalAuthServer).Callback(ctx, req.(*CBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocalAuth_ServiceDesc is the grpc.ServiceDesc for LocalAuth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocalAuth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "localauth.LocalAuth",
	HandlerType: (*LocalAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _LocalAuth_Ping_Handler,
		},
		{
			MethodName: "GetAccessToken",
			Handler:    _LocalAuth_GetAccessToken_Handler,
		},
		{
			MethodName: "Callback",
			Handler:    _LocalAuth_Callback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipc/locauth.proto",
}
